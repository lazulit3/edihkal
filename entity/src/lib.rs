/*!
// TODO: These docs are out of date. (e.g. DeriveNewModel location, but probably many things.)

The `entity` crate provides data model types and APIs for working with edihkal's database using `sea-orm`.

`entity` contains modules that represent database entities corresponding to tables in the database.

Each entity module includes:
- An `Entity` type that provides an API for database operations.
- A `Model` type that defines an entity's data model and represents an instance of some entity.
- A `NewModel` that represents a new `Model` that is not yet created in the database; this is effectively a `Model`
  type without an `id` (primary key) field.
- And more (see SeaORM's documentation).

## Usage

### Create a New Entity in the Database

To create a new instance of an entity: define a `NewModel`, convert it into an `ActiveModel`, and then insert it
into the databse:

```no_compile
# use sea_orm::{prelude::*, Database, DatabaseConnection, IntoActiveModel};
use entity::drug;

let new_drug = drug::NewModel {
    name: "Tea".to_owned(),
};

let drug: drug::Model = new_drug.into_active_model().insert(db).await.unwrap();
```

A `NewModel` represents a new entity that has not been inserted yet; this type is effectively a `Model` without the
`id` field (because an `id` only exists for entities that exist in the database).

A `NewModel` must be converted into an `ActiveModel` before it can be inserted into the database. `IntoActiveModel`
is automatically derived on `NewModel` as part of the [`edihkal_macros::DeriveNewModel`] derivation on `Model`.

The inserted `Model` is returned from the insert operation; this is the same as the inserted `NewModel`, but with an `id`
field containing a randomly generated `entity::Uuid`.

## Generated Code

Most of `entity` is generated automatically (via `sea-orm-codegen` / `sea-orm-cli`) by defining the database schema using the
`edihkal/migration`, applying migrations to a local database, and generating `entity` from the local database schema.

However, this crate also contains additional changes made to the generated code.

## Understanding Macros and Derived Types

`sea-orm` makes heavy use of derive macros aiming to balance verbosity and clarity.
Because many of the types available in an entity module are derived automatically, they may not be expressed
directly in `entity` code.

There exist a few different strategies for understanding what these derivations expand to:
1. Read the crate documentation; this can be generated using `cargo doc --open` in the `entity` crate.
2. Expand derive macros using the `rust-analyzer` LSP's macro expansion caapabilities directly in your editor.
3. Use `cargo-expand` to view an expansion of the crate or specific modules or named items.

Additionally, SeaORM's documentation is a valuable reference.


## `NewModel` Types

`NewModel` is a type derived from each `Model` using [`edihkal_macros::DeriveNewModel`]. Although this is not
provided directly by `sea-orm`, it follows a `NewModel` pattern described in SeaORM documentation
(under "Custom Active Model").

Because edihkal's database does not automatically generate the `id: Uuid` primary keys as a column default, new IDs
are generated by `entity` before a `NewModel` is inserted into the database.
The `NewModel` type allows frontends and API clients (such as `edihkal-client`) to define new instances of an entity
to be created without having to worry about the `id` field (which is handled by the backend).

For convenience, `edihkal_macros` provides [`DeriveNewModel`][DNM] to derive `NewModel` types behind the scenes by simply
attaching this macro to a `Model` definition:

```no_compile
use entity::Uuid;
use sea_orm::prelude::*;
use serde::{Serialize, Deserialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, edihkal_macros::DeriveNewModel)]
#[sea_orm(table_name = "drug")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub name: String,
}
...
```

`Model` definitions are generated by SeaORM based on the database schema, so this deriviation is specified by
passing `--model-extra-derives 'edihkal_macros::DeriveNewModel` to the generate command:

```text
sea-orm-cli generate entity \
--lib \
--model-extra-derives 'edihkal_macros::DeriveNewModel' \
--output-dir entity/src/ \
--with-serde both
```

[DNM]: edihkal_macros::DeriveNewModel
*/

pub mod prelude;

pub mod drug;
pub mod entry;

// The code below is not generated by sea-orm-codegen and may need to be restored after updating the generated entities.
mod behavior;
pub mod uuid;

pub use crate::uuid::UuidV4 as Uuid;
