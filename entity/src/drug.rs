//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use crate::Uuid;

use sea_orm::entity::prelude::*;
use sea_skipper::{DeriveNewModel, Location, Resource};
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, DeriveNewModel, Eq, Serialize, Deserialize,
)]
#[sea_orm(table_name = "drug")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::entry::Entity")]
    Entry,
}

impl Related<super::entry::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Entry.def()
    }
}

// TODO: It's not ideal to implement these manually here because this is generated code.
// This could be derived.
impl Resource for Entity {
    type ActiveModel = ActiveModel;
    type Data = Model;
    type Id = Uuid;
}

// TODO: It's not ideal to implement these manually here because this is generated code.
// This could be derived here, or it may make more sense for `entity` to become a sub-module of
// `edihkal` since that's where the route is defined. (But that has other considerations for model
// definitions / dependencies for other crates e.g. `edihkal-client`.)
impl Location for Model {
    fn location(&self) -> String {
        format!("/drugs/{}", self.id)
    }
}
